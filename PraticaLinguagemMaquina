#Exercícios 1 e 2:
#  - Declarei as arrays e a váriavel multiplicadora 2
#  - Guardei em A os valores 1, 3, 2, 1, 4, 5. Cada um endereçado em t0
#  - Depois de guardar um valor t0 na array A, multipliquei t0 pela variavel multiplicadora e 
#    guardei em t1 para guardar na mesma posição da array B

# Declarando arrays e guardando no endereço x8 e x9
li x8,0x10010000
li x9,0x10010020

# Declarando variável multiplicadora guardando e no endereço x7
li x7, 0x0000002

# Somando 0 e 1 e guardando no endereço da variável temporária t0
addi t0, x0, 0x0000001
# Salvando o conteúdo do endereço t0 na posição 0 da array presente no endereço x8
sw t0, 0(x8)
# Multiplicando o conteúdo do endereço variável multiplicadora x7 com o conteúdo do endereço t0 
mul t1 , x7 , t0
# Salvando o conteúdo do endereço t1 na posição 0 da array presente no endereço x9
sw t1, 0(x9)

addi t0, x0, 0x0000003	
sw t0, 4(x8)
mul t1 , x7 , t0
sw t1, 4(x9)

addi t0, x0, 0x0000002
sw t0, 8(x8)
mul t1 , x7 , t0
sw t1, 8(x9)

addi t0, x0, 0x0000001
sw t0, 12(x8)
mul t1 , x7 , t0
sw t1, 12(x9)

addi t0, x0, 0x0000004
sw t0, 16(x8)
mul t1 , x7 , t0
sw t1, 16(x9)

addi t0, x0, 0x0000005
sw t0, 20(x8)
mul t1 , x7 , t0
sw t1, 20(x9)

# Exercícios 3 e 4:
#  3 -> Li os valores de cada endereço da posição da array e guardei a soma em x10 e x11 até o final da array
#  4 -> Quando li os valores da array B pra armazenar a soma em x10 comparei se era impar ou não, se fosse eu jogava o valor de x10,
#       até então, na posição que estava sendo lida

# Guardando o conteúdo do endereço 0 da array presente no endereço x9 no endereço da variável referenciada por t0
lb t0, 0(x9)
# Somando o conteúdo do endereço da variável x0 a o conteúdo da variável t0 e guardando no endereço referenciado por x11 
add x11, x0, t0 
lb t0, 0(x8)
add x10, x0, t0
# Função and compara 2 valores bit a bit e retorna um booleano( 0 ou 1 ) no caso como estou comparando com 1, se o resultado 
# retornar 1 quer dizer que o numero é impar
andi t1, t0, 0x0000001
# Branch if not equals, se t1 que é 1 não for igual a x0 (0) então vá pra função Else0
bne t1, x0, Else0
# Função pra pular o Else
j Exit0
Else0: sw x10, 0(x8)
Exit0:

lb t0, 4(x9)
add x11, x11, t0 
lb t0, 4(x8)
add x10, x10, t0 
andi t1, t0, 0x0000001
bne t1, x0, Else4
j Exit4
Else4: sw x10, 4(x8)
Exit4:

lb t0, 8(x9)
add x11, x11, t0
lb t0, 8(x8)
add x10, x10, t0
andi t1, t0, 0x0000001
bne t1, x0, Else8
j Exit8
Else8: sw x10, 8(x8)
Exit8: 

lb t0, 12(x9)
add x11, x11, t0
lb t0, 12(x8)
add x10, x10, t0
andi t1, t0, 0x0000001
bne t1, x0, Else12
j Exit12
Else12: sw x10, 12(x8)
Exit12:

lb t0, 16(x9)
add x11, x11, t0
lb t0, 16(x8)
add x10, x10, t0
andi t1, t0, 0x0000001
bne t1, x0, Else16
j Exit16
Else16: sw x10, 12(x8)
Exit16:

lb t0, 20(x9)
add x11, x11, t0
lb t0, 20(x8)
add x10, x10, t0
andi t1, t0, 0x0000001
bne t1, x0, Else20
j Exit20
Else20: sw x10, 20(x8)
Exit20: 

# Exercício 5 - FEITO APÓS AS QUESTÕES DE 1 A 4, CASO DÊ ERROS POR FAVOR RODE AS QUESTÕES DE 1 A 4 E DEPOIS A QUESTÃO 5

# s0 Case 1
addi s0, x0, 0x0000001
# s1 Case 2
addi s1, x0, 0x0000002

# Váriveis quaisquer
addi x5, x0, 0x0000001
addi x6, x0, 0x0000009
addi x7, x0, 0x0000005

beq x5, s0, Case1
beq x5, s1, Case2
add x6, x0, x7
Case1: addi x6, x7, 0x0000001
j Exit1
Case2: addi x6, x7, 0x0000002
Exit1: 
